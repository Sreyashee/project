{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sreyoshi\\\\myproj\\\\frontend\\\\src\\\\components\\\\manageAddress.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { FaMapMarkerAlt, FaHome, FaBuilding, FaUsers } from 'react-icons/fa'; // Address type and location icons\n// import { GoogleMap, LoadScript, Autocomplete, Marker } from '@react-google-maps/api'; // Import Google Maps components\n// import { FaLocationCrosshairs } from \"react-icons/fa6\";\n// import '../styles/manageAddress.css';\n\n// const ManageAddresses = () => {\n//   const [addresses, setAddresses] = useState([\n//     { id: 1, type: 'Home', address: '123 Home St, Cityville', icon: <FaHome color=\"black\" /> },\n//     { id: 2, type: 'Office', address: '456 Work Rd, Metropolis', icon: <FaBuilding color=\"black\" /> },\n//     { id: 3, type: 'Friends & Family', address: '789 Friend Ave, Townsville', icon: <FaUsers color=\"black\" /> },\n//   ]);\n\n//   const [recentSearches, setRecentSearches] = useState([\n//     { id: 1, type: 'Search 1', address: 'Some Location, City' },\n//     { id: 2, type: 'Search 2', address: 'Another Location, Metropolis' },\n//     { id: 3, type: 'Search 3', address: 'Yet Another Location, Townsville' },\n//   ]);\n\n//   const [searchTerm, setSearchTerm] = useState('');\n//   const [selectedAddress, setSelectedAddress] = useState('');\n//   const [manualSearchMode, setManualSearchMode] = useState(false);\n\n//   const handleDelete = (id) => {\n//     setAddresses(addresses.filter((address) => address.id !== id));\n//   };\n\n//   const handleSearch = (e) => {\n//     setSearchTerm(e.target.value);\n//   };\n\n//   const handleSearchManually = () => {\n//     setManualSearchMode(true); // Activate manual search mode\n//   };\n\n//   const handlePlaceSelect = (autocomplete) => {\n//     const place = autocomplete.getPlace();\n//     if (place && place.formatted_address) {\n//       setSelectedAddress(place.formatted_address);\n//       setManualSearchMode(false); // Close manual search after address is selected\n//     }\n//   };\n\n//   return (\n//     <div className=\"manage-addresses\">\n//       {/* Search Bar Section */}\n//       <div className=\"search-bar\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search your area / pincode / apartment\"\n//           value={searchTerm}\n//           onChange={handleSearch}\n//         />\n//       </div>\n\n//       {/* Current Location and Enable Button */}\n//       <div className=\"location-section\">\n//         <div className=\"location-info\">\n//           <FaLocationCrosshairs color=\"red\" />\n//           <span className=\"current-location\">Current Location</span>\n//         </div>\n//         <button className=\"enable-btn\">Enable</button>\n//         <div className=\"underline\"></div>\n//       </div>\n\n//       {/* Manual Search Section */}\n//       {manualSearchMode && (\n//         <div className=\"manual-search\">\n//           <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}>\n//             <GoogleMap\n//               mapContainerStyle={{ width: '100%', height: '400px' }}\n//               zoom={12}\n//               center={{ lat: 0, lng: 0 }} // Optional: Center the map\n//             >\n//               <Autocomplete\n//                 onLoad={(autocomplete) => console.log('Autocomplete loaded')}\n//                 onPlaceChanged={(e) => handlePlaceSelect(e)}\n//               >\n//                 <input\n//                   type=\"text\"\n//                   placeholder=\"Enter address\"\n//                   style={{\n//                     width: '100%',\n//                     padding: '10px',\n//                     fontSize: '16px',\n//                     borderRadius: '5px',\n//                     border: '1px solid #ccc',\n//                   }}\n//                 />\n//               </Autocomplete>\n//             </GoogleMap>\n//           </LoadScript>\n//         </div>\n//       )}\n\n//       {/* Saved Location Section */}\n//       <div className=\"saved-location\">\n//         <h3>Saved Location</h3>\n//         <ul>\n//           {addresses.map((address) => (\n//             <li key={address.id} className=\"address-item\">\n//               <div className=\"address-info\">\n//                 <div className=\"address-type\">\n//                   {address.icon}\n//                   <strong>{address.type}</strong>\n//                 </div>\n//                 <p className=\"address-text\">{address.address}</p>\n//               </div>\n//             </li>\n//           ))}\n//         </ul>\n//         <div className=\"underline\"></div>\n//       </div>\n\n//       {/* Recent Searches Section */}\n//       <div className=\"recent-searches\">\n//         <h3>Recent Searches</h3>\n//         <ul>\n//           {recentSearches.map((search) => (\n//             <li key={search.id} className=\"address-item\">\n//               <div className=\"address-info\">\n//                 <div className=\"address-type\">\n//                   <FaMapMarkerAlt color=\"red\" />\n//                   <strong>{search.type}</strong>\n//                 </div>\n//                 <p className=\"address-text\">{search.address}</p>\n//               </div>\n//             </li>\n//           ))}\n//         </ul>\n//         <div className=\"underline\"></div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ManageAddresses;\n\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api';\nimport { FaLocationCrosshairs } from 'react-icons/fa6';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapPicker = ({\n  onLocationSelect\n}) => {\n  _s();\n  const [location, setLocation] = useState(null);\n  const [placeName, setPlaceName] = useState('');\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: 'REACT_APP_GOOGLE_MAPS_API_KEY',\n    // Replace with your Google Maps API Key\n    libraries: ['places']\n  });\n  useEffect(() => {\n    if (location) {\n      getPlaceName(location.lat, location.lng); // Convert lat-lng to place name\n    }\n  }, [location]);\n  const getPlaceName = (lat, lng) => {\n    const geocoder = new window.google.maps.Geocoder();\n    const latLng = new window.google.maps.LatLng(lat, lng);\n    geocoder.geocode({\n      location: latLng\n    }, (results, status) => {\n      if (status === 'OK' && results[0]) {\n        setPlaceName(results[0].formatted_address); // Set the place name\n      } else {\n        console.error('Geocoder failed due to: ' + status);\n      }\n    });\n  };\n  const handleEnableLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setLocation({\n        lat: latitude,\n        lng: longitude\n      });\n    }, error => {\n      console.error(error);\n    });\n  };\n  if (loadError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error loading map\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 25\n  }, this);\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEnableLocation,\n      children: [/*#__PURE__*/_jsxDEV(FaLocationCrosshairs, {\n        color: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), \"Enable Location\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), location && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: placeName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n      center: location || {\n        lat: 0,\n        lng: 0\n      },\n      zoom: 15,\n      mapContainerStyle: {\n        width: '100%',\n        height: '400px'\n      },\n      children: location && /*#__PURE__*/_jsxDEV(Marker, {\n        position: location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n_s(MapPicker, \"ZoMSTI4K8WLtjo0mRyEC4hMeFTw=\", false, function () {\n  return [useLoadScript];\n});\n_c = MapPicker;\nexport default MapPicker;\nvar _c;\n$RefreshReg$(_c, \"MapPicker\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","FaLocationCrosshairs","jsxDEV","_jsxDEV","MapPicker","onLocationSelect","_s","location","setLocation","placeName","setPlaceName","isLoaded","loadError","googleMapsApiKey","libraries","getPlaceName","lat","lng","geocoder","window","google","maps","Geocoder","latLng","LatLng","geocode","results","status","formatted_address","console","error","handleEnableLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","color","center","zoom","mapContainerStyle","width","height","_c","$RefreshReg$"],"sources":["C:/Users/sreyoshi/myproj/frontend/src/components/manageAddress.js"],"sourcesContent":["\r\n// import React, { useState } from 'react';\r\n// import { FaMapMarkerAlt, FaHome, FaBuilding, FaUsers } from 'react-icons/fa'; // Address type and location icons\r\n// import { GoogleMap, LoadScript, Autocomplete, Marker } from '@react-google-maps/api'; // Import Google Maps components\r\n// import { FaLocationCrosshairs } from \"react-icons/fa6\";\r\n// import '../styles/manageAddress.css';\r\n\r\n// const ManageAddresses = () => {\r\n//   const [addresses, setAddresses] = useState([\r\n//     { id: 1, type: 'Home', address: '123 Home St, Cityville', icon: <FaHome color=\"black\" /> },\r\n//     { id: 2, type: 'Office', address: '456 Work Rd, Metropolis', icon: <FaBuilding color=\"black\" /> },\r\n//     { id: 3, type: 'Friends & Family', address: '789 Friend Ave, Townsville', icon: <FaUsers color=\"black\" /> },\r\n//   ]);\r\n\r\n//   const [recentSearches, setRecentSearches] = useState([\r\n//     { id: 1, type: 'Search 1', address: 'Some Location, City' },\r\n//     { id: 2, type: 'Search 2', address: 'Another Location, Metropolis' },\r\n//     { id: 3, type: 'Search 3', address: 'Yet Another Location, Townsville' },\r\n//   ]);\r\n\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [selectedAddress, setSelectedAddress] = useState('');\r\n//   const [manualSearchMode, setManualSearchMode] = useState(false);\r\n\r\n//   const handleDelete = (id) => {\r\n//     setAddresses(addresses.filter((address) => address.id !== id));\r\n//   };\r\n\r\n//   const handleSearch = (e) => {\r\n//     setSearchTerm(e.target.value);\r\n//   };\r\n\r\n//   const handleSearchManually = () => {\r\n//     setManualSearchMode(true); // Activate manual search mode\r\n//   };\r\n\r\n//   const handlePlaceSelect = (autocomplete) => {\r\n//     const place = autocomplete.getPlace();\r\n//     if (place && place.formatted_address) {\r\n//       setSelectedAddress(place.formatted_address);\r\n//       setManualSearchMode(false); // Close manual search after address is selected\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"manage-addresses\">\r\n//       {/* Search Bar Section */}\r\n//       <div className=\"search-bar\">\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Search your area / pincode / apartment\"\r\n//           value={searchTerm}\r\n//           onChange={handleSearch}\r\n//         />\r\n//       </div>\r\n\r\n//       {/* Current Location and Enable Button */}\r\n//       <div className=\"location-section\">\r\n//         <div className=\"location-info\">\r\n//           <FaLocationCrosshairs color=\"red\" />\r\n//           <span className=\"current-location\">Current Location</span>\r\n//         </div>\r\n//         <button className=\"enable-btn\">Enable</button>\r\n//         <div className=\"underline\"></div>\r\n//       </div>\r\n\r\n//       {/* Manual Search Section */}\r\n//       {manualSearchMode && (\r\n//         <div className=\"manual-search\">\r\n//           <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}>\r\n//             <GoogleMap\r\n//               mapContainerStyle={{ width: '100%', height: '400px' }}\r\n//               zoom={12}\r\n//               center={{ lat: 0, lng: 0 }} // Optional: Center the map\r\n//             >\r\n//               <Autocomplete\r\n//                 onLoad={(autocomplete) => console.log('Autocomplete loaded')}\r\n//                 onPlaceChanged={(e) => handlePlaceSelect(e)}\r\n//               >\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   placeholder=\"Enter address\"\r\n//                   style={{\r\n//                     width: '100%',\r\n//                     padding: '10px',\r\n//                     fontSize: '16px',\r\n//                     borderRadius: '5px',\r\n//                     border: '1px solid #ccc',\r\n//                   }}\r\n//                 />\r\n//               </Autocomplete>\r\n//             </GoogleMap>\r\n//           </LoadScript>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Saved Location Section */}\r\n//       <div className=\"saved-location\">\r\n//         <h3>Saved Location</h3>\r\n//         <ul>\r\n//           {addresses.map((address) => (\r\n//             <li key={address.id} className=\"address-item\">\r\n//               <div className=\"address-info\">\r\n//                 <div className=\"address-type\">\r\n//                   {address.icon}\r\n//                   <strong>{address.type}</strong>\r\n//                 </div>\r\n//                 <p className=\"address-text\">{address.address}</p>\r\n//               </div>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//         <div className=\"underline\"></div>\r\n//       </div>\r\n\r\n//       {/* Recent Searches Section */}\r\n//       <div className=\"recent-searches\">\r\n//         <h3>Recent Searches</h3>\r\n//         <ul>\r\n//           {recentSearches.map((search) => (\r\n//             <li key={search.id} className=\"address-item\">\r\n//               <div className=\"address-info\">\r\n//                 <div className=\"address-type\">\r\n//                   <FaMapMarkerAlt color=\"red\" />\r\n//                   <strong>{search.type}</strong>\r\n//                 </div>\r\n//                 <p className=\"address-text\">{search.address}</p>\r\n//               </div>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//         <div className=\"underline\"></div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ManageAddresses;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api';\r\nimport { FaLocationCrosshairs } from 'react-icons/fa6';\r\n\r\nconst MapPicker = ({ onLocationSelect }) => {\r\n  const [location, setLocation] = useState(null);\r\n  const [placeName, setPlaceName] = useState('');\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: 'REACT_APP_GOOGLE_MAPS_API_KEY', // Replace with your Google Maps API Key\r\n    libraries: ['places'],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (location) {\r\n      getPlaceName(location.lat, location.lng); // Convert lat-lng to place name\r\n    }\r\n  }, [location]);\r\n\r\n  const getPlaceName = (lat, lng) => {\r\n    const geocoder = new window.google.maps.Geocoder();\r\n\r\n    const latLng = new window.google.maps.LatLng(lat, lng);\r\n\r\n    geocoder.geocode({ location: latLng }, (results, status) => {\r\n      if (status === 'OK' && results[0]) {\r\n        setPlaceName(results[0].formatted_address); // Set the place name\r\n      } else {\r\n        console.error('Geocoder failed due to: ' + status);\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleEnableLocation = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n        setLocation({ lat: latitude, lng: longitude });\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  };\r\n\r\n  if (loadError) return <div>Error loading map</div>;\r\n  if (!isLoaded) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleEnableLocation}>\r\n        <FaLocationCrosshairs color=\"red\" />\r\n        Enable Location\r\n      </button>\r\n\r\n      {/* Display current location */}\r\n      {location && (\r\n        <div>\r\n          <h3>Selected Location</h3>\r\n          <p>{placeName}</p>\r\n        </div>\r\n      )}\r\n\r\n      <GoogleMap\r\n        center={location || { lat: 0, lng: 0 }}\r\n        zoom={15}\r\n        mapContainerStyle={{ width: '100%', height: '400px' }}\r\n      >\r\n        {location && <Marker position={location} />}\r\n      </GoogleMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapPicker;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}