{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sreyoshi\\\\myproj\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import MapPicker from './components/mapPicker';\n// import LocationModal from './components/locationModal';\n// import useGeolocation from './hooks/useGeolocation';\n// import AddressForm from './components/addressForm'; // Import AddressForm component\n// import './App.css'; // Ensure App-wide styles are included\n\n// const App = () => {\n//   const { position, error } = useGeolocation();\n//   const [showModal, setShowModal] = useState(true);\n//   const [selectedLocation, setSelectedLocation] = useState(null);\n//   const [showAddressForm, setShowAddressForm] = useState(false); // Track form visibility\n//   const [savedAddresses, setSavedAddresses] = useState([]); // Store saved addresses\n\n//   // Handle enabling location (requesting browser permissions)\n//   const handleEnableLocation = () => {\n//     if (position) {\n//       setSelectedLocation({\n//         lat: position.coords.latitude,\n//         lng: position.coords.longitude,\n//       });\n//       setShowModal(false); // Close the modal once location is granted\n//       setShowAddressForm(true); // Show address form after location is granted\n//     } else {\n//       alert('Location permission denied or unavailable.');\n//     }\n//   };\n\n//   // Handle manual search (trigger map or input field for address search)\n//   const handleManualSearch = () => {\n//     setShowModal(false); // Close the modal for manual search\n//     setShowAddressForm(true); // Show address form after manual search\n//   };\n\n//   // Handle the selected location from the map\n//   const handleLocationSelect = (loc) => {\n//     setSelectedLocation(loc);\n//     setShowAddressForm(true); // Show address form after selecting location from map\n//   };\n\n//   // Handle saving the address form data\n//   const handleSaveAddress = (addressData) => {\n//     const newAddress = { ...addressData, location: selectedLocation };\n//     setSavedAddresses([...savedAddresses, newAddress]);\n//     alert('Address saved successfully!');\n//     setShowAddressForm(false); // Close the form after saving\n//   };\n\n//   return (\n//     <div>\n//       {showModal && <LocationModal onEnable={handleEnableLocation} onManualSearch={handleManualSearch} />}\n\n//       {/* MapPicker to allow user to pick a location */}\n//       <MapPicker onLocationSelect={handleLocationSelect} initialLocation={selectedLocation} />\n\n//       {/* Display selected location coordinates */}\n//       {selectedLocation && (\n//         <div className=\"selected-location\">\n//           <p>Selected Location:</p>\n//           <p>Lat: {selectedLocation.lat}</p>\n//           <p>Lng: {selectedLocation.lng}</p>\n//         </div>\n//       )}\n\n//       {/* Address Form for entering and saving addresses */}\n//       {showAddressForm && (\n//         <AddressForm onSave={handleSaveAddress} />\n//       )}\n\n//       {/* Display the saved addresses */}\n//       <div className=\"address-list\">\n//         <h2>Saved Addresses</h2>\n//         {savedAddresses.length > 0 ? (\n//           <ul>\n//             {savedAddresses.map((address, index) => (\n//               <li key={index}>\n//                 <p><strong>{address.category}:</strong> {address.houseNo}, {address.area}</p>\n//                 <p><strong>Location:</strong> Lat: {address.location.lat}, Lng: {address.location.lng}</p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No addresses saved yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ManageAddresses from './pages/ManageAddresses'; // New page for managing addresses\nimport MapPicker from './components/MapPicker';\nimport AddressForm from './components/AddressForm';\nimport LocationModal from './components/LocationModal';\nimport useGeolocation from './hooks/useGeolocation';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const {\n    position,\n    error\n  } = useGeolocation();\n  const [selectedLocation, setSelectedLocation] = React.useState(null);\n  const [showModal, setShowModal] = React.useState(true);\n  const handleEnableLocation = () => {\n    if (position) {\n      setSelectedLocation({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      setShowModal(false);\n    } else {\n      alert('Location permission denied or unavailable.');\n    }\n  };\n  const handleManualSearch = () => {\n    setShowModal(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        children: [showModal && /*#__PURE__*/_jsxDEV(LocationModal, {\n          onEnable: handleEnableLocation,\n          onManualSearch: handleManualSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(MapPicker, {\n          onLocationSelect: setSelectedLocation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), selectedLocation && /*#__PURE__*/_jsxDEV(AddressForm, {\n          location: `${selectedLocation.lat}, ${selectedLocation.lng}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/locations\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(ManageAddresses, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"s8XdN2Jy7IM8RKToEkFhC4rFdUw=\", false, function () {\n  return [useGeolocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Route","Switch","ManageAddresses","MapPicker","AddressForm","LocationModal","useGeolocation","jsxDEV","_jsxDEV","App","_s","position","error","selectedLocation","setSelectedLocation","useState","showModal","setShowModal","handleEnableLocation","lat","coords","latitude","lng","longitude","alert","handleManualSearch","children","path","exact","onEnable","onManualSearch","fileName","_jsxFileName","lineNumber","columnNumber","onLocationSelect","location","_c","$RefreshReg$"],"sources":["C:/Users/sreyoshi/myproj/frontend/src/App.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import MapPicker from './components/mapPicker';\n// import LocationModal from './components/locationModal';\n// import useGeolocation from './hooks/useGeolocation';\n// import AddressForm from './components/addressForm'; // Import AddressForm component\n// import './App.css'; // Ensure App-wide styles are included\n\n// const App = () => {\n//   const { position, error } = useGeolocation();\n//   const [showModal, setShowModal] = useState(true);\n//   const [selectedLocation, setSelectedLocation] = useState(null);\n//   const [showAddressForm, setShowAddressForm] = useState(false); // Track form visibility\n//   const [savedAddresses, setSavedAddresses] = useState([]); // Store saved addresses\n\n//   // Handle enabling location (requesting browser permissions)\n//   const handleEnableLocation = () => {\n//     if (position) {\n//       setSelectedLocation({\n//         lat: position.coords.latitude,\n//         lng: position.coords.longitude,\n//       });\n//       setShowModal(false); // Close the modal once location is granted\n//       setShowAddressForm(true); // Show address form after location is granted\n//     } else {\n//       alert('Location permission denied or unavailable.');\n//     }\n//   };\n\n//   // Handle manual search (trigger map or input field for address search)\n//   const handleManualSearch = () => {\n//     setShowModal(false); // Close the modal for manual search\n//     setShowAddressForm(true); // Show address form after manual search\n//   };\n\n//   // Handle the selected location from the map\n//   const handleLocationSelect = (loc) => {\n//     setSelectedLocation(loc);\n//     setShowAddressForm(true); // Show address form after selecting location from map\n//   };\n\n//   // Handle saving the address form data\n//   const handleSaveAddress = (addressData) => {\n//     const newAddress = { ...addressData, location: selectedLocation };\n//     setSavedAddresses([...savedAddresses, newAddress]);\n//     alert('Address saved successfully!');\n//     setShowAddressForm(false); // Close the form after saving\n//   };\n\n//   return (\n//     <div>\n//       {showModal && <LocationModal onEnable={handleEnableLocation} onManualSearch={handleManualSearch} />}\n      \n//       {/* MapPicker to allow user to pick a location */}\n//       <MapPicker onLocationSelect={handleLocationSelect} initialLocation={selectedLocation} />\n      \n//       {/* Display selected location coordinates */}\n//       {selectedLocation && (\n//         <div className=\"selected-location\">\n//           <p>Selected Location:</p>\n//           <p>Lat: {selectedLocation.lat}</p>\n//           <p>Lng: {selectedLocation.lng}</p>\n//         </div>\n//       )}\n\n//       {/* Address Form for entering and saving addresses */}\n//       {showAddressForm && (\n//         <AddressForm onSave={handleSaveAddress} />\n//       )}\n\n//       {/* Display the saved addresses */}\n//       <div className=\"address-list\">\n//         <h2>Saved Addresses</h2>\n//         {savedAddresses.length > 0 ? (\n//           <ul>\n//             {savedAddresses.map((address, index) => (\n//               <li key={index}>\n//                 <p><strong>{address.category}:</strong> {address.houseNo}, {address.area}</p>\n//                 <p><strong>Location:</strong> Lat: {address.location.lat}, Lng: {address.location.lng}</p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No addresses saved yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ManageAddresses from './pages/ManageAddresses'; // New page for managing addresses\nimport MapPicker from './components/MapPicker';\nimport AddressForm from './components/AddressForm';\nimport LocationModal from './components/LocationModal';\nimport useGeolocation from './hooks/useGeolocation';\nimport './App.css';\n\nconst App = () => {\n  const { position, error } = useGeolocation();\n  const [selectedLocation, setSelectedLocation] = React.useState(null);\n  const [showModal, setShowModal] = React.useState(true);\n\n  const handleEnableLocation = () => {\n    if (position) {\n      setSelectedLocation({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n      });\n      setShowModal(false);\n    } else {\n      alert('Location permission denied or unavailable.');\n    }\n  };\n\n  const handleManualSearch = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <Router>\n      <Switch>\n        {/* Home Route */}\n        <Route path=\"/\" exact>\n          {showModal && <LocationModal onEnable={handleEnableLocation} onManualSearch={handleManualSearch} />}\n          <MapPicker onLocationSelect={setSelectedLocation} />\n          {selectedLocation && <AddressForm location={`${selectedLocation.lat}, ${selectedLocation.lng}`} />}\n        </Route>\n\n        {/* New Locations Route */}\n        <Route path=\"/locations\" exact>\n          <ManageAddresses />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}