{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sreyoshi\\\\myproj\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import MapPicker from './components/mapPicker';\n// import LocationModal from './components/locationModal';\n// import useGeolocation from './hooks/useGeolocation';\n// import AddressForm from './components/addressForm'; // Import AddressForm component\n// import './App.css'; // Ensure App-wide styles are included\n\n// const App = () => {\n//   const { position, error } = useGeolocation();\n//   const [showModal, setShowModal] = useState(true);\n//   const [selectedLocation, setSelectedLocation] = useState(null);\n//   const [showAddressForm, setShowAddressForm] = useState(false); // Track form visibility\n//   const [savedAddresses, setSavedAddresses] = useState([]); // Store saved addresses\n\n//   // Handle enabling location (requesting browser permissions)\n//   const handleEnableLocation = () => {\n//     if (position) {\n//       setSelectedLocation({\n//         lat: position.coords.latitude,\n//         lng: position.coords.longitude,\n//       });\n//       setShowModal(false); // Close the modal once location is granted\n//       setShowAddressForm(true); // Show address form after location is granted\n//     } else {\n//       alert('Location permission denied or unavailable.');\n//     }\n//   };\n\n//   // Handle manual search (trigger map or input field for address search)\n//   const handleManualSearch = () => {\n//     setShowModal(false); // Close the modal for manual search\n//     setShowAddressForm(true); // Show address form after manual search\n//   };\n\n//   // Handle the selected location from the map\n//   const handleLocationSelect = (loc) => {\n//     setSelectedLocation(loc);\n//     setShowAddressForm(true); // Show address form after selecting location from map\n//   };\n\n//   // Handle saving the address form data\n//   const handleSaveAddress = (addressData) => {\n//     const newAddress = { ...addressData, location: selectedLocation };\n//     setSavedAddresses([...savedAddresses, newAddress]);\n//     alert('Address saved successfully!');\n//     setShowAddressForm(false); // Close the form after saving\n//   };\n\n//   return (\n//     <div>\n//       {showModal && <LocationModal onEnable={handleEnableLocation} onManualSearch={handleManualSearch} />}\n\n//       {/* MapPicker to allow user to pick a location */}\n//       <MapPicker onLocationSelect={handleLocationSelect} initialLocation={selectedLocation} />\n\n//       {/* Display selected location coordinates */}\n//       {selectedLocation && (\n//         <div className=\"selected-location\">\n//           <p>Selected Location:</p>\n//           <p>Lat: {selectedLocation.lat}</p>\n//           <p>Lng: {selectedLocation.lng}</p>\n//         </div>\n//       )}\n\n//       {/* Address Form for entering and saving addresses */}\n//       {showAddressForm && (\n//         <AddressForm onSave={handleSaveAddress} />\n//       )}\n\n//       {/* Display the saved addresses */}\n//       <div className=\"address-list\">\n//         <h2>Saved Addresses</h2>\n//         {savedAddresses.length > 0 ? (\n//           <ul>\n//             {savedAddresses.map((address, index) => (\n//               <li key={index}>\n//                 <p><strong>{address.category}:</strong> {address.houseNo}, {address.area}</p>\n//                 <p><strong>Location:</strong> Lat: {address.location.lat}, Lng: {address.location.lng}</p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No addresses saved yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom'; // Use Routes instead of Switch\nimport ManageAddresses from './components/manageAddress';\nimport MapPicker from './components/mapPicker';\nimport AddressForm from './components/addressForm';\nimport LocationModal from './components/locationModal';\nimport useGeolocation from './hooks/useGeolocation';\nimport './App.css';\n\n// const App = () => {\n//   const { position, error } = useGeolocation();\n//   const [selectedLocation, setSelectedLocation] = React.useState(null);\n//   const [showModal, setShowModal] = React.useState(true);\n\n//   const handleEnableLocation = () => {\n//     if (position) {\n//       setSelectedLocation({\n//         lat: position.coords.latitude,\n//         lng: position.coords.longitude,\n//       });\n//       setShowModal(false);\n//     } else {\n//       alert('Location permission denied or unavailable.');\n//     }\n//   };\n\n//   const handleManualSearch = () => {\n//     setShowModal(false);\n//   };\n\n//   return (\n//     <Router>\n//       <Routes>\n//         {/* Home Route */}\n//         <Route\n//           path=\"/\"\n//           element={\n//             <>\n//               {showModal && <LocationModal onEnable={handleEnableLocation} onManualSearch={handleManualSearch} />}\n//               <MapPicker onLocationSelect={setSelectedLocation} />\n//               {selectedLocation && <AddressForm location={`${selectedLocation.lat}, ${selectedLocation.lng}`} />}\n//             </>\n//           }\n//         />\n\n//         {/* Locations Route */}\n//         <Route path=\"/locations\" element={<ManageAddresses />} />\n//       </Routes>\n//     </Router>\n//   );\n// };\n\n// export default App;\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const {\n    position,\n    error\n  } = useGeolocation();\n  const [selectedLocation, setSelectedLocation] = React.useState(null);\n  const [showModal, setShowModal] = React.useState(true);\n  const navigate = useNavigate(); // Import useNavigate for navigation\n\n  const handleEnableLocation = () => {\n    if (position) {\n      setSelectedLocation({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n      setShowModal(false);\n    } else {\n      alert('Location permission denied or unavailable.');\n    }\n  };\n  const handleManualSearch = () => {\n    setShowModal(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [showModal && /*#__PURE__*/_jsxDEV(LocationModal, {\n            onEnable: handleEnableLocation,\n            onManualSearch: handleManualSearch\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(MapPicker, {\n            onLocationSelect: setSelectedLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), selectedLocation && /*#__PURE__*/_jsxDEV(AddressForm, {\n            location: `${selectedLocation.lat}, ${selectedLocation.lng}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 36\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"manage-address-btn\",\n            onClick: () => window.location.href = '/locations' // Redirect using window.location.href\n            ,\n            children: \"Manage Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/locations\",\n        element: /*#__PURE__*/_jsxDEV(ManageAddresses, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"HCpqh/WRb6dCozS4Vc/0wI31erI=\", false, function () {\n  return [useGeolocation, useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Route","Routes","useNavigate","ManageAddresses","MapPicker","AddressForm","LocationModal","useGeolocation","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","position","error","selectedLocation","setSelectedLocation","useState","showModal","setShowModal","navigate","handleEnableLocation","lat","coords","latitude","lng","longitude","alert","handleManualSearch","children","path","element","onEnable","onManualSearch","fileName","_jsxFileName","lineNumber","columnNumber","onLocationSelect","location","className","onClick","window","href","_c","$RefreshReg$"],"sources":["C:/Users/sreyoshi/myproj/frontend/src/App.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import MapPicker from './components/mapPicker';\n// import LocationModal from './components/locationModal';\n// import useGeolocation from './hooks/useGeolocation';\n// import AddressForm from './components/addressForm'; // Import AddressForm component\n// import './App.css'; // Ensure App-wide styles are included\n\n// const App = () => {\n//   const { position, error } = useGeolocation();\n//   const [showModal, setShowModal] = useState(true);\n//   const [selectedLocation, setSelectedLocation] = useState(null);\n//   const [showAddressForm, setShowAddressForm] = useState(false); // Track form visibility\n//   const [savedAddresses, setSavedAddresses] = useState([]); // Store saved addresses\n\n//   // Handle enabling location (requesting browser permissions)\n//   const handleEnableLocation = () => {\n//     if (position) {\n//       setSelectedLocation({\n//         lat: position.coords.latitude,\n//         lng: position.coords.longitude,\n//       });\n//       setShowModal(false); // Close the modal once location is granted\n//       setShowAddressForm(true); // Show address form after location is granted\n//     } else {\n//       alert('Location permission denied or unavailable.');\n//     }\n//   };\n\n//   // Handle manual search (trigger map or input field for address search)\n//   const handleManualSearch = () => {\n//     setShowModal(false); // Close the modal for manual search\n//     setShowAddressForm(true); // Show address form after manual search\n//   };\n\n//   // Handle the selected location from the map\n//   const handleLocationSelect = (loc) => {\n//     setSelectedLocation(loc);\n//     setShowAddressForm(true); // Show address form after selecting location from map\n//   };\n\n//   // Handle saving the address form data\n//   const handleSaveAddress = (addressData) => {\n//     const newAddress = { ...addressData, location: selectedLocation };\n//     setSavedAddresses([...savedAddresses, newAddress]);\n//     alert('Address saved successfully!');\n//     setShowAddressForm(false); // Close the form after saving\n//   };\n\n//   return (\n//     <div>\n//       {showModal && <LocationModal onEnable={handleEnableLocation} onManualSearch={handleManualSearch} />}\n      \n//       {/* MapPicker to allow user to pick a location */}\n//       <MapPicker onLocationSelect={handleLocationSelect} initialLocation={selectedLocation} />\n      \n//       {/* Display selected location coordinates */}\n//       {selectedLocation && (\n//         <div className=\"selected-location\">\n//           <p>Selected Location:</p>\n//           <p>Lat: {selectedLocation.lat}</p>\n//           <p>Lng: {selectedLocation.lng}</p>\n//         </div>\n//       )}\n\n//       {/* Address Form for entering and saving addresses */}\n//       {showAddressForm && (\n//         <AddressForm onSave={handleSaveAddress} />\n//       )}\n\n//       {/* Display the saved addresses */}\n//       <div className=\"address-list\">\n//         <h2>Saved Addresses</h2>\n//         {savedAddresses.length > 0 ? (\n//           <ul>\n//             {savedAddresses.map((address, index) => (\n//               <li key={index}>\n//                 <p><strong>{address.category}:</strong> {address.houseNo}, {address.area}</p>\n//                 <p><strong>Location:</strong> Lat: {address.location.lat}, Lng: {address.location.lng}</p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No addresses saved yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Routes, useNavigate } from 'react-router-dom'; // Use Routes instead of Switch\nimport ManageAddresses from './components/manageAddress';\nimport MapPicker from './components/mapPicker';\nimport AddressForm from './components/addressForm';\nimport LocationModal from './components/locationModal';\nimport useGeolocation from './hooks/useGeolocation';\nimport './App.css';\n\n// const App = () => {\n//   const { position, error } = useGeolocation();\n//   const [selectedLocation, setSelectedLocation] = React.useState(null);\n//   const [showModal, setShowModal] = React.useState(true);\n\n//   const handleEnableLocation = () => {\n//     if (position) {\n//       setSelectedLocation({\n//         lat: position.coords.latitude,\n//         lng: position.coords.longitude,\n//       });\n//       setShowModal(false);\n//     } else {\n//       alert('Location permission denied or unavailable.');\n//     }\n//   };\n\n//   const handleManualSearch = () => {\n//     setShowModal(false);\n//   };\n\n//   return (\n//     <Router>\n//       <Routes>\n//         {/* Home Route */}\n//         <Route\n//           path=\"/\"\n//           element={\n//             <>\n//               {showModal && <LocationModal onEnable={handleEnableLocation} onManualSearch={handleManualSearch} />}\n//               <MapPicker onLocationSelect={setSelectedLocation} />\n//               {selectedLocation && <AddressForm location={`${selectedLocation.lat}, ${selectedLocation.lng}`} />}\n//             </>\n//           }\n//         />\n\n//         {/* Locations Route */}\n//         <Route path=\"/locations\" element={<ManageAddresses />} />\n//       </Routes>\n//     </Router>\n//   );\n// };\n\n// export default App;\n\nconst App = () => {\n  const { position, error } = useGeolocation();\n  const [selectedLocation, setSelectedLocation] = React.useState(null);\n  const [showModal, setShowModal] = React.useState(true);\n  const navigate = useNavigate(); // Import useNavigate for navigation\n\n  const handleEnableLocation = () => {\n    if (position) {\n      setSelectedLocation({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n      });\n      setShowModal(false);\n    } else {\n      alert('Location permission denied or unavailable.');\n    }\n  };\n\n  const handleManualSearch = () => {\n    setShowModal(false);\n  };\n\n  return (\n    <Router>\n      <Routes>\n        {/* Home Route */}\n        <Route\n          path=\"/\"\n          element={\n            <>\n              {showModal && <LocationModal onEnable={handleEnableLocation} onManualSearch={handleManualSearch} />}\n              <MapPicker onLocationSelect={setSelectedLocation} />\n              {selectedLocation && <AddressForm location={`${selectedLocation.lat}, ${selectedLocation.lng}`} />}\n              <button\n                className=\"manage-address-btn\"\n                onClick={() => (window.location.href = '/locations')} // Redirect using window.location.href\n              >\n                Manage Address\n              </button>\n            </>\n          }\n        />\n\n        {/* Locations Route */}\n        <Route path=\"/locations\" element={<ManageAddresses />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;"],"mappings":";;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AACxF,OAAOC,eAAe,MAAM,4BAA4B;AACxD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,cAAc,MAAM,wBAAwB;AACnD,OAAO,WAAW;;AAElB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM;IAAEC,QAAQ;IAAEC;EAAM,CAAC,GAAGR,cAAc,CAAC,CAAC;EAC5C,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpB,KAAK,CAACqB,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGvB,KAAK,CAACqB,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAMG,QAAQ,GAAGnB,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAMoB,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAIR,QAAQ,EAAE;MACZG,mBAAmB,CAAC;QAClBM,GAAG,EAAET,QAAQ,CAACU,MAAM,CAACC,QAAQ;QAC7BC,GAAG,EAAEZ,QAAQ,CAACU,MAAM,CAACG;MACvB,CAAC,CAAC;MACFP,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,MAAM;MACLQ,KAAK,CAAC,4CAA4C,CAAC;IACrD;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/BT,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,oBACEX,OAAA,CAACV,MAAM;IAAA+B,QAAA,eACLrB,OAAA,CAACR,MAAM;MAAA6B,QAAA,gBAELrB,OAAA,CAACT,KAAK;QACJ+B,IAAI,EAAC,GAAG;QACRC,OAAO,eACLvB,OAAA,CAAAE,SAAA;UAAAmB,QAAA,GACGX,SAAS,iBAAIV,OAAA,CAACH,aAAa;YAAC2B,QAAQ,EAAEX,oBAAqB;YAACY,cAAc,EAAEL;UAAmB;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACnG7B,OAAA,CAACL,SAAS;YAACmC,gBAAgB,EAAEtB;UAAoB;YAAAkB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EACnDtB,gBAAgB,iBAAIP,OAAA,CAACJ,WAAW;YAACmC,QAAQ,EAAE,GAAGxB,gBAAgB,CAACO,GAAG,KAAKP,gBAAgB,CAACU,GAAG;UAAG;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAClG7B,OAAA;YACEgC,SAAS,EAAC,oBAAoB;YAC9BC,OAAO,EAAEA,CAAA,KAAOC,MAAM,CAACH,QAAQ,CAACI,IAAI,GAAG,YAAc,CAAC;YAAA;YAAAd,QAAA,EACvD;UAED;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,eACT;MACH;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAGF7B,OAAA,CAACT,KAAK;QAAC+B,IAAI,EAAC,YAAY;QAACC,OAAO,eAAEvB,OAAA,CAACN,eAAe;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACzB,EAAA,CAhDID,GAAG;EAAA,QACqBL,cAAc,EAGzBL,WAAW;AAAA;AAAA2C,EAAA,GAJxBjC,GAAG;AAkDT,eAAeA,GAAG;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}