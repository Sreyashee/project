{"ast":null,"code":"\n// import React, { useState, useEffect } from 'react';\n// import MapPicker from './components/mapPicker';\n// import LocationModal from './components/locationModal';\n// import useGeolocation from './hooks/useGeolocation';\n// import AddressForm from './components/addressForm'; // Import AddressForm component\n// import './App.css'; // Ensure App-wide styles are included\n\n// const App = () => {\n//   const { position, error } = useGeolocation();\n//   const [showModal, setShowModal] = useState(true);\n//   const [selectedLocation, setSelectedLocation] = useState(null);\n//   const [showAddressForm, setShowAddressForm] = useState(false); // Track form visibility\n//   const [savedAddresses, setSavedAddresses] = useState([]); // Store saved addresses\n\n//   // Handle enabling location (requesting browser permissions)\n//   const handleEnableLocation = () => {\n//     if (position) {\n//       setSelectedLocation({\n//         lat: position.coords.latitude,\n//         lng: position.coords.longitude,\n//       });\n//       setShowModal(false); // Close the modal once location is granted\n//       setShowAddressForm(true); // Show address form after location is granted\n//     } else {\n//       alert('Location permission denied or unavailable.');\n//     }\n//   };\n\n//   // Handle manual search (trigger map or input field for address search)\n//   const handleManualSearch = () => {\n//     setShowModal(false); // Close the modal for manual search\n//     setShowAddressForm(true); // Show address form after manual search\n//   };\n\n//   // Handle the selected location from the map\n//   const handleLocationSelect = (loc) => {\n//     setSelectedLocation(loc);\n//     setShowAddressForm(true); // Show address form after selecting location from map\n//   };\n\n//   // Handle saving the address form data\n//   const handleSaveAddress = (addressData) => {\n//     const newAddress = { ...addressData, location: selectedLocation };\n//     setSavedAddresses([...savedAddresses, newAddress]);\n//     alert('Address saved successfully!');\n//     setShowAddressForm(false); // Close the form after saving\n//   };\n\n//   return (\n//     <div>\n//       {showModal && <LocationModal onEnable={handleEnableLocation} onManualSearch={handleManualSearch} />}\n\n//       {/* MapPicker to allow user to pick a location */}\n//       <MapPicker onLocationSelect={handleLocationSelect} initialLocation={selectedLocation} />\n\n//       {/* Display selected location coordinates */}\n//       {selectedLocation && (\n//         <div className=\"selected-location\">\n//           <p>Selected Location:</p>\n//           <p>Lat: {selectedLocation.lat}</p>\n//           <p>Lng: {selectedLocation.lng}</p>\n//         </div>\n//       )}\n\n//       {/* Address Form for entering and saving addresses */}\n//       {showAddressForm && (\n//         <AddressForm onSave={handleSaveAddress} />\n//       )}\n\n//       {/* Display the saved addresses */}\n//       <div className=\"address-list\">\n//         <h2>Saved Addresses</h2>\n//         {savedAddresses.length > 0 ? (\n//           <ul>\n//             {savedAddresses.map((address, index) => (\n//               <li key={index}>\n//                 <p><strong>{address.category}:</strong> {address.houseNo}, {address.area}</p>\n//                 <p><strong>Location:</strong> Lat: {address.location.lat}, Lng: {address.location.lng}</p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No addresses saved yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/sreyoshi/myproj/frontend/src/App.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import MapPicker from './components/mapPicker';\n// import LocationModal from './components/locationModal';\n// import useGeolocation from './hooks/useGeolocation';\n// import AddressForm from './components/addressForm'; // Import AddressForm component\n// import './App.css'; // Ensure App-wide styles are included\n\n// const App = () => {\n//   const { position, error } = useGeolocation();\n//   const [showModal, setShowModal] = useState(true);\n//   const [selectedLocation, setSelectedLocation] = useState(null);\n//   const [showAddressForm, setShowAddressForm] = useState(false); // Track form visibility\n//   const [savedAddresses, setSavedAddresses] = useState([]); // Store saved addresses\n\n//   // Handle enabling location (requesting browser permissions)\n//   const handleEnableLocation = () => {\n//     if (position) {\n//       setSelectedLocation({\n//         lat: position.coords.latitude,\n//         lng: position.coords.longitude,\n//       });\n//       setShowModal(false); // Close the modal once location is granted\n//       setShowAddressForm(true); // Show address form after location is granted\n//     } else {\n//       alert('Location permission denied or unavailable.');\n//     }\n//   };\n\n//   // Handle manual search (trigger map or input field for address search)\n//   const handleManualSearch = () => {\n//     setShowModal(false); // Close the modal for manual search\n//     setShowAddressForm(true); // Show address form after manual search\n//   };\n\n//   // Handle the selected location from the map\n//   const handleLocationSelect = (loc) => {\n//     setSelectedLocation(loc);\n//     setShowAddressForm(true); // Show address form after selecting location from map\n//   };\n\n//   // Handle saving the address form data\n//   const handleSaveAddress = (addressData) => {\n//     const newAddress = { ...addressData, location: selectedLocation };\n//     setSavedAddresses([...savedAddresses, newAddress]);\n//     alert('Address saved successfully!');\n//     setShowAddressForm(false); // Close the form after saving\n//   };\n\n//   return (\n//     <div>\n//       {showModal && <LocationModal onEnable={handleEnableLocation} onManualSearch={handleManualSearch} />}\n      \n//       {/* MapPicker to allow user to pick a location */}\n//       <MapPicker onLocationSelect={handleLocationSelect} initialLocation={selectedLocation} />\n      \n//       {/* Display selected location coordinates */}\n//       {selectedLocation && (\n//         <div className=\"selected-location\">\n//           <p>Selected Location:</p>\n//           <p>Lat: {selectedLocation.lat}</p>\n//           <p>Lng: {selectedLocation.lng}</p>\n//         </div>\n//       )}\n\n//       {/* Address Form for entering and saving addresses */}\n//       {showAddressForm && (\n//         <AddressForm onSave={handleSaveAddress} />\n//       )}\n\n//       {/* Display the saved addresses */}\n//       <div className=\"address-list\">\n//         <h2>Saved Addresses</h2>\n//         {savedAddresses.length > 0 ? (\n//           <ul>\n//             {savedAddresses.map((address, index) => (\n//               <li key={index}>\n//                 <p><strong>{address.category}:</strong> {address.houseNo}, {address.area}</p>\n//                 <p><strong>Location:</strong> Lat: {address.location.lat}, Lng: {address.location.lng}</p>\n//               </li>\n//             ))}\n//           </ul>\n//         ) : (\n//           <p>No addresses saved yet.</p>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}